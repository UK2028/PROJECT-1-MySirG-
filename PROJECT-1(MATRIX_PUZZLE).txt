NAME-UDIT KHANDELWAL								PROJECT-1 (MATRIX PUZZLE)





#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#include<time.h>
#include <windows.h>
#include<string.h>
#include<math.h>
#define ANSI_COLOR_RED "\x1b[31m"
#define ANSI_COLOR_GREEN "\x1b[32m"
#define ANSI_COLOR_YELLOW "\x1b[33m"
#define ANSI_COLOR_CYAN "\x1b[36m"
#define ANSI_COLOR_RESET "\x1b[0m"

void game_rules(int win[4][4]);
void random_matrix(int m[4][4]);
void display_random_matrix(int m[4][4]);
int winner(int win[4][4],int m[4][4]);
int input();
int up(int m[4][4]);
int down(int m[4][4]);
int left(int m[4][4]);
int right(int m[4][4]);
void swap(int*,int*);


int main()
{
    int m[4][4],win[4][4],chances=10,button;
    char name[20];
    printf("player name:");
    fgets(name,20,stdin);
    name[strlen(name)-1]='\0';
    system("cls");
    while(1)
    {
        chances=10;
        game_rules(win);
        random_matrix(m);
        while(!winner(win,m))
        {
            system("cls");
            printf("Hello %s, chances remaining: %d",name,chances);
            display_random_matrix(m);
            button=input();
            switch(button)
            {
            case 72:
                if(up(m))
                    break;
            case 80:
                if(down(m))
                    break;
            case 75:
                if(left(m))
                    break;
            case 77:
                if(right(m))
                    break;
            default:
                printf("press a valid button\n");
                chances++;
                break;
            case 101:
                printf("Thanks for playing");
                return 0;
            case 69:
                printf("Thanks for playing");
                return 0;
            }
            chances--;
            if(!chances&&!winner(win,m))
            {
                printf("Your chances are over\n");
                printf(ANSI_COLOR_RED "\t\tGAME OVER\n\t\tYOU LOSE\n" ANSI_COLOR_RESET);
                break;
            }
        }
        if(chances!=0)
            printf(ANSI_COLOR_GREEN "CONGRATULATIONS %S\nYOU WON" ANSI_COLOR_RESET,name);
        printf("\n\nDO YOU WANT TO PLAY AGAIN?\nenter 'y' or 'Y' to play again:");
        char choice;
        scanf("%c",&choice);
        if(choice!='y'&&choice!='Y')
        {
            break;
        }
        system("cls");
    }
    getch();
}

int up(int m[4][4])
{
    int i,j,pos_i,pos_j,count=0;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(m[i][j]==0)
            {
                pos_i=i;
                pos_j=j;
                count++;
                break;
            }
        }
        if(count!=0)
            break;
    }
    if(pos_i==0)
        return 0;
    swap(&m[pos_i-1][pos_j],&m[pos_i][pos_j]);
    return 1;
}

int down(int m[4][4])
{
    int i,j,pos_i,pos_j,count=0;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(m[i][j]==0)
            {
                pos_i=i;
                pos_j=j;
                count++;
                break;
            }
        }
        if(count!=0)
            break;
    }
    if(pos_i==3)
        return 0;
    swap(&m[pos_i][pos_j],&m[pos_i+1][pos_j]);
    return 1;
}

int left(int m[4][4])
{
    int i,j,pos_i,pos_j,count=0;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(m[i][j]==0)
            {
                pos_i=i;
                pos_j=j;
                count++;
                break;
            }
        }
        if(count!=0)
            break;
    }
    if(pos_j==0)
        return 0;
    swap(&m[pos_i][pos_j-1],&m[pos_i][pos_j]);
    return 1;
}

int right(int m[4][4])
{
    int i,j,pos_i,pos_j,count=0;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(m[i][j]==0)
            {
                pos_i=i;
                pos_j=j;
                count++;
                break;
            }
        }
        if(count!=0)
            break;
    }
    if(pos_j==3)
        return 0;
    swap(&m[pos_i][pos_j],&m[pos_i][pos_j+1]);
    return 1;
}

void swap(int *a,int *b)
{
    int temp;
    temp=*a;
    *a=*b;
    *b=temp;
}

void game_rules(int win[4][4])
{
    int i,j,k=1;
    printf(ANSI_COLOR_CYAN "\t\t\tMATRIX PUZZLE\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "RULE OF THIS GAME:-\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "1. You can move only 1 step at a time with the arrow key.\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "2. You can move numbers at an empty position only.\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "3. For each valid move : your total number of moves will decrease by 1.\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "4.Winning situation:-\n" ANSI_COLOR_RESET);
    printf(ANSI_COLOR_RED "\tNumber in a 4*4 matrix should be in order from 1 to 15" ANSI_COLOR_RESET);
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            win[i][j]=k;
            k++;
        }
    }
    win[3][3]=0;
    printf(ANSI_COLOR_YELLOW "\n-----------------\n" ANSI_COLOR_RESET);
    for(i=0;i<4;i++)
    {
        printf("|");
        for(j=0;j<4;j++)
        {
            if(win[i][j]==0)
            {
                printf(ANSI_COLOR_YELLOW "   |" ANSI_COLOR_RESET);
                break;
            }
            printf(ANSI_COLOR_YELLOW "%2d |" ANSI_COLOR_RESET,win[i][j]);
        }
        printf("\n");
    }
    printf(ANSI_COLOR_YELLOW "-----------------\n\n" ANSI_COLOR_RESET);
    printf("5.You can exit the game at any time by pressing 'E' or 'e'.\n");
    printf("So try to win in minimum numbers of moves.\n\n");
    printf("\t\tHAPPY GAMING  GOOD LUCK\n\n\n\n");
    printf("Press any key to start......  ");
    if(input())
        system("cls");
}

int input()
{
    char c;
    c=getch();
    if(c==-32)
        c=getch();
    return c;
}

void random_matrix(int m[4][4])
{
    int n[15],i,j,l=1,u=15,index=0;
    srand(time(NULL));
    for(i=0;i<15;i++)
    {
        n[i]=(rand()%(u-l+1))+l;
        for(j=0;j<i;j++)
        {
            if(n[j]==n[i])
                break;
        }
        if(j!=i)
            i--;
    }

    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            m[i][j]=n[index];
            index++;
            if(index==15)
                break;
        }
    }
    m[3][3]=0;
}

void display_random_matrix(int m[4][4])
{
    int i,j;
    printf(ANSI_COLOR_YELLOW "\n-----------------\n" ANSI_COLOR_RESET);
    for(i=0;i<4;i++)
    {
        printf(ANSI_COLOR_YELLOW "|" ANSI_COLOR_RESET);
        for(j=0;j<4;j++)
        {
            if(m[i][j]!=0)
            {
                printf(ANSI_COLOR_YELLOW "%2d |" ANSI_COLOR_RESET,m[i][j]);
            }
            else
                printf(ANSI_COLOR_YELLOW "   |" ANSI_COLOR_RESET,m[i][j]);
        }
        printf("\n");
    }
    printf(ANSI_COLOR_YELLOW "-----------------\n" ANSI_COLOR_RESET);
}


int winner(int win[4][4],int m[4][4])
{
    int i,j,count=0;
    for(i=0;i<4;i++)
    {
        for(j=0;j<4;j++)
        {
            if(win[i][j]!=m[i][j])
            {
                count++;
                break;
            }
        }
        if(count==1)
            break;
    }
    if(count==0)
        return 1;
    else
        return 0;
}
